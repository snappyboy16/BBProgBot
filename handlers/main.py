from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from Data import config
from database import db
from start_bot import dp, bot
from keyboards import kb
from states.state import *
from functions.old_mode_ifs import process_callback_btn_delete1

import pickle
from nltk import RegexpTokenizer
from sklearn.feature_extraction.text import TfidfVectorizer
import pymorphy2
import pandas as pd

with open(r'C:\Users\aleks\PycharmProjects\BBProgBot\pkl\model5.pkl', "rb") as f:
    model = pickle.load(f)

tokenizer = RegexpTokenizer(r'\w+')
morph = pymorphy2.MorphAnalyzer()
tfidfconverter = TfidfVectorizer()

data = pd.read_csv(r'C:\Users\aleks\PycharmProjects\BBProgBot\handlers\translated_data2.csv')
X_train = tfidfconverter.fit_transform(data["utterance"]).toarray()


@dp.message_handler(state='*', commands=['start'])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.first_name}</b>, —è - –±–æ—Ç, "
                                                 f"—Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º —Å –≤–∞—à–∏–º–∏ <b>–≤–æ–ø—Ä–æ—Å–∞–º–∏</b>.\n\n"
                                                 f"ü§ñ <b>–ë–æ—Ç</b> —É–º–µ–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ <b>–≤–æ–ø—Ä–æ—Å—ã</b>, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å <b>—Ç–µ–º–∞–º–∏</b>:\n\n"
                                                 f"üîπ <em>–°–æ–∑–¥–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</em>\n"
                                                 f"üîπ <em>–°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</em>\n"
                                                 f"üîπ <em>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã, —Å–≤—è–∑—å —Å —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –æ–ø—Ü–∏–∏ –∏ —Å—Ä–æ–∫–∏</em>\n"
                                                 f"üîπ <em>–î–æ—Å—Ç–∞–≤–∫–∏, –∂–∞–ª–æ–±–∞, –æ—Ç–∑—ã–≤, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞</em>\n"
                                                 f"üîπ <em>–û—Ç–º–µ–Ω–∞, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, —Å–ø–æ—Å–æ–±—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π</em>\n"
                                                 f"üîπ <em>–í–æ–∑–≤—Ä–∞—Ç, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</em>\n\n"
                                                 f"üÜò –í–≤–µ–¥–∏—Ç–µ /help , —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å <b>—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª</b> –±–æ—Ç–∞.\n\n"
                                                 f"‚ùóÔ∏è –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <b>–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º</b>, –≤—ã –¥–æ–ª–∂–Ω—ã <b>–≤–æ–π—Ç–∏</b> –≤ –∞–∫–∫–∞—É–Ω—Ç.",
                           reply_markup=kb.main_klava, parse_mode='HTML')
    await NotLogin.state_.set()


@dp.message_handler(state='*', commands=['help'])
async def help_me(message: types.Message):
    await bot.send_message(message.from_user.id, f"üìú <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n"
                                                 f"/login ‚Äî –ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.\n"
                                                 f"/logout ‚Äî –ö–æ–º–∞–Ω–¥–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
                                                 f"/stop ‚Äî –ö–æ–º–∞–Ω–¥–∞ <b>–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—â–µ–Ω–∏—è</b> —Å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
                           parse_mode='HTML')


@dp.callback_query_handler(lambda call: call.data == 'cancel_button', state=InChat.state_)
async def del_queue(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    if callback.from_user.id in config.operators:
        await LoginOperator.state_.set()
    else:
        await LoginUser.state_.set()
    await bot.answer_callback_query(callback.id)
    await db.delete_queue(callback.from_user.id)
    await bot.send_message(callback.from_user.id, 'üö´ –ü–æ–∏—Å–∫ <b>–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>.', parse_mode='HTML')


@dp.message_handler(state=InChat.state_, commands=["stop"])
async def stop(message: types.Message, state: FSMContext):
    # try:
        chat_info = await db.get_active_chat(message.from_user.id)
        if chat_info:
            id_ = await db.vi_vishli_iz_chata(message.from_user.id)
            if message.from_user.id in config.operators:
                stated = dp.current_state(chat=message.from_user.id)
                await stated.finish()
                await stated.set_state(LoginOperator.state_)
                stated2 = dp.current_state(chat=id_)
                await stated2.finish()
                await stated2.set_state(LoginUser.state_)
                print('–û–ü–ï–†–ê–¢–û–† –ó–ê–í–ï–†–®–ò–õ –û–ë–©–ï–ù–ò–ï')
            else:
                stated = dp.current_state(chat=id_)
                await stated.finish()
                await stated.set_state(LoginOperator.state_)
                stated2 = dp.current_state(chat=message.from_user.id)
                await stated2.finish()
                await stated2.set_state(LoginUser.state_)
                print('–ö–õ–ò–ï–ù–¢ –ó–ê–í–ï–†–®–ò–õ –û–ë–©–ï–ù–ò–ï')

            await bot.send_message(id_, "‚ùóÔ∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ <b>–ø–æ–∫–∏–Ω—É–ª —á–∞—Ç</b>",
                                   reply_markup=types.ReplyKeyboardRemove(),
                                   parse_mode='HTML')
            await bot.send_message(message.from_user.id, "‚ùóÔ∏è –í—ã <b>–≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞</b>",
                                   reply_markup=types.ReplyKeyboardRemove(),
                                   parse_mode='HTML')
            await db.delete_chat(chat_info[0])
        else:
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è –í—ã <b>–Ω–µ –Ω–∞—á–∞–ª–∏</b> —á–∞—Ç.", parse_mode='HTML')
    # except Exception as ex_:
    #     await bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    #     print(ex_)


@dp.message_handler(state=InChat.state_, content_types=['photo', 'text'])
async def talking(message: types.Message):
    get_active_chat = await db.check_active_chat(message.chat.id)
    if get_active_chat:
        my_id = message.from_user.id
        one = get_active_chat[1]
        two = get_active_chat[2]
        print(one, two)
        dct = {
            one: two,
            two: one
        }
        if message.text:
            await bot.send_message(dct[my_id], message.text)
        elif message.photo:
            await bot.send_photo(dct[my_id], message.photo[-1].file_id)
        else:
            pass
    else:
        pass


@dp.message_handler(state=LoginUser.state_)
async def ml(message: types.Message):
    request = message.text
    try:
        res = model.predict(tfidfconverter.transform(
            [' '.join([morph.parse(word)[0][2] for word in tokenizer.tokenize(f'{request}')])]).toarray())
        await message.answer(res[0], reply_markup=kb.bot_pomog)
    except Exception as ex_:
        print(ex_)


@dp.callback_query_handler(lambda call: call.data == 'pomog', state=LoginUser.state_)
async def pomog(callback: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await bot.send_message(callback.from_user.id, '‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!\n\n'
                                                  '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ :)\n',
                           reply_markup=kb.ssilka)
    await state.finish()
    await bot.send_message(callback.from_user.id, '–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º —Å–Ω–æ–≤–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å')
    await NotLogin.state_.set()


@dp.callback_query_handler(lambda call: call.data == 'to_operator', state=LoginUser.state_)
async def to_operator(callback: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    chat_two = await db.get_chat(callback.from_user.id)
    if not await db.create_chat(callback.from_user.id, chat_two):
        await db.add_queue(callback.from_user.id)
        await bot.send_message(callback.from_user.id, f"üîé –ü–æ–∏—Å–∫ <b>–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ</b> –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...",
                               reply_markup=kb.cancel_search,
                               parse_mode='HTML')
        await state.finish()
        await InChat.state_.set()
    else:
        await state.finish()
        await InChat.state_.set()
        await bot.send_message(chat_two, "‚úÖ –ö–ª–∏–µ–Ω—Ç <b>–Ω–∞–π–¥–µ–Ω</b>!\n", reply_markup=kb.stop, parse_mode='HTML')
        await bot.send_message(callback.from_user.id, "‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä <b>–Ω–∞–π–¥–µ–Ω!</b>\n"
                                                      "–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.", parse_mode='HTML', reply_markup=kb.stop)


@dp.message_handler(state=LoginOperator.state_, commands=["find"])
async def find(message: types.Message, state: FSMContext):
    chat_two = await db.get_chat(message.chat.id)
    if not await db.create_chat(message.chat.id, chat_two):
        await db.add_queue(message.from_user.id)
        await bot.send_message(message.chat.id, f"üîé –ü–æ–∏—Å–∫ <b>–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ</b> –∫–ª–∏–µ–Ω—Ç–∞...", reply_markup=kb.cancel_search,
                               parse_mode='HTML')
        await state.finish()
        await InChat.state_.set()
    else:
        await state.finish()
        await InChat.state_.set()
        await bot.send_message(message.chat.id, "‚úÖ –ö–ª–∏–µ–Ω—Ç <b>–Ω–∞–π–¥–µ–Ω!</b>", reply_markup=kb.stop,
                               parse_mode='HTML')
        await bot.send_message(chat_two, "‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä <b>–Ω–∞–π–¥–µ–Ω!</b>", reply_markup=kb.stop,
                               parse_mode='HTML')


@dp.message_handler(state=NotLogin.state_, commands=["login"])
async def login(message: types.Message, state: FSMContext):
    await state.finish()
    config.operators = await db.get_all_operators()
    if message.from_user.id in config.operators:
        await LoginOperator.state_.set()
        await message.answer('‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä.', reply_markup=kb.find)
    elif message.from_user.id in config.admins:
        await LoginAdmin.state_.set()
        await message.answer('‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω.\n\n'
                             '/add id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–µ—Ä–∞—Ç–æ—Ä–∞.\n'
                             '/remove id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–µ—Ä–∞—Ç–æ—Ä–∞.')
    else:
        await LoginUser.state_.set()
        await message.answer('‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.\n\n'
                             '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–ª–æ–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å.')


@dp.message_handler(state=LoginOperator.state_, commands=["logout"])
async def logout_operator(message: types.Message, state: FSMContext):
    await state.finish()
    await NotLogin.state_.set()
    await message.answer('‚ö†Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.')


@dp.message_handler(state=LoginAdmin.state_, commands=["logout"])
async def logout_admin(message: types.Message, state: FSMContext):
    await state.finish()
    await NotLogin.state_.set()
    await message.answer('‚ö†Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.')


@dp.message_handler(state=LoginUser.state_, commands=["logout"])
async def logout(message: types.Message, state: FSMContext):
    await state.finish()
    await NotLogin.state_.set()
    await message.answer('‚ö†Ô∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.')


@dp.message_handler(state=LoginAdmin.state_, commands=["add"])
async def admin_add(message: types.Message):
    chat_id = message.text.split()[1]
    if chat_id in config.operators:
        await message.reply('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ç–æ—Ä —Å —Ç–∞–∫–∏–º id —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.')
    else:
        config.operators.append(chat_id)
        await db.add_operator(chat_id)
        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.')


@dp.message_handler(state=LoginAdmin.state_, commands=["remove"])
async def admin_remove(message: types.Message):
    chat_id = message.text.split()[1]

    if chat_id in config.operators:
        config.operators.remove(chat_id)
        await db.del_operator(chat_id)
        await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.')
    else:
        await message.reply('‚ö†Ô∏è –û–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç –≤ –±–∞–∑–µ.')


@dp.callback_query_handler(lambda call: call.data == 'old_button', state='*')
async def old_mode(callback: types.CallbackQuery):
    await bot.send_message(callback.from_user.id, '‚úÖ–í–∫–ª—é—á—ë–Ω —Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º.\n\n–í–æ–ø—Ä–æ—Å –ø–æ –∫–∞–∫–æ–π —Ç–µ–º–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
                           reply_markup=kb.old)


def register_handlers_main(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(help_me, commands=['help'])
    dp.register_message_handler(stop, commands=['stop'])
    dp.register_message_handler(login, commands=['login'])
    dp.register_message_handler(logout_admin, commands=['logout'])
    dp.register_message_handler(logout_operator, commands=['logout'])
    dp.register_message_handler(logout, commands=['logout'])
    dp.register_message_handler(find, commands=['find'])
    dp.register_message_handler(admin_add, commands=['add'])
    dp.register_message_handler(admin_remove, commands=['remove'])
    dp.register_message_handler(ml)
    dp.register_message_handler(talking)
    dp.register_callback_query_handler(to_operator)
    dp.register_callback_query_handler(process_callback_btn_delete1)
    dp.register_callback_query_handler(process_callback_btn_delete1)
    dp.register_callback_query_handler(old_mode)
    dp.register_callback_query_handler(pomog)
    dp.register_callback_query_handler(ml)
