from start_bot import dp, bot
from aiogram import types
from keyboards import kb


@dp.callback_query_handler(lambda call: call.data and call.data.startswith('key_'), state='*')
async def process_callback_btn_delete1(callback_query: types.CallbackQuery):
    if callback_query.data.split('key_')[1] == 'account':
        await bot.send_message(callback_query.from_user.id, text='üë§ –ü—Ä–æ–±–ª–µ–º—ã —Å <b>–∞–∫–∫–∞—É–Ω—Ç–æ–º</b> ‚ÅâÔ∏è',
                               reply_markup=kb.accounts, parse_mode='HTML')
    elif callback_query.data.split('key_')[1] == 'contact':
        await bot.send_message(callback_query.from_user.id, text='üìû –ù–∞—à–∏ <b>–∫–æ–Ω—Ç–∞–∫—Ç—ã</b>',
                               reply_markup=kb.contacts, parse_mode='HTML')
    elif callback_query.data.split('key_')[1] == 'deliver':
        await bot.send_message(callback_query.from_user.id, text='üöö –ü—Ä–æ–±–ª–µ–º—ã —Å <b>–¥–æ—Å—Ç–∞–≤–∫–æ–π</b> ‚ÅâÔ∏è',
                               reply_markup=kb.delivers, parse_mode='HTML')
    elif callback_query.data.split('key_')[1] == 'feedback':
        await bot.send_message(callback_query.from_user.id, text='üßë‚Äçüíª <b>–û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å</b> –º–æ–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –Ω–∏–∂–µ',
                               reply_markup=kb.feedbacks, parse_mode='HTML')
    elif callback_query.data.split('key_')[1] == 'check':
        await bot.send_message(callback_query.from_user.id, text='üìÉ –í—Å—ë –æ <b>—á–µ–∫–∞—Ö</b>',
                               reply_markup=kb.checks, parse_mode='HTML')
    elif callback_query.data.split('key_')[1] == 'order':
        await bot.send_message(callback_query.from_user.id, text='üì¶ –í—Å—ë –æ <b>–∑–∞–∫–∞–∑–∞—Ö</b>',
                               reply_markup=kb.orders, parse_mode='HTML')
    elif callback_query.data.split('key_')[1] == 'payment':
        await bot.send_message(callback_query.from_user.id, text='üí≥ –í—Å—ë –æ–± <b>–æ–ø–ª–∞—Ç–µ</b>',
                               reply_markup=kb.payments, parse_mode='HTML')
    elif callback_query.data.split('key_')[1] == 'refund':
        await bot.send_message(callback_query.from_user.id, text='üí∏ –í—Å—ë –æ <b>–≤–æ–∑–≤—Ä–∞—Ç–∞—Ö</b>',
                               reply_markup=kb.refunds, parse_mode='HTML')


@dp.callback_query_handler(lambda call: call.data and call.data.startswith('btn_'), state='*')
async def process_callback_btn_delete2(callback_query: types.CallbackQuery):
    if callback_query.data.split('btn_')[1] == 'create':
        await bot.send_message(callback_query.from_user.id, text='‚ûï –ß—Ç–æ–±—ã <b>—Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>, <b>—Å–æ–∑–¥–∞–π—Ç–µ '
                                                                 '–∞–∫–∫–∞—É–Ω—Ç</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'delete':
        await bot.send_message(callback_query.from_user.id,
                               text='‚ùå –ß—Ç–æ–±—ã <b>—É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>, <b>—É–¥–∞–ª–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'edit':
        await bot.send_message(callback_query.from_user.id,
                               text='‚úèÔ∏è –ß—Ç–æ–±—ã <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>, <b>—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'recover':
        await bot.send_message(callback_query.from_user.id,
                               text='üîê –ß—Ç–æ–±—ã <b>–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å</b>, <b>–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'switch':
        await bot.send_message(callback_query.from_user.id,
                               text='üîÑ –ß—Ç–æ–±—ã <b>—Å–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</b>, <b>—Å–º–µ–Ω–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'support':
        await bot.send_message(callback_query.from_user.id,
                               text='üõ† –ß—Ç–æ–±—ã <b>–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>, <b>–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'human':
        await bot.send_message(callback_query.from_user.id,
                               text='üßë‚Äçüíª –ß—Ç–æ–±—ã <b>–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É</b>, <b>–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'options':
        await bot.send_message(callback_query.from_user.id, text='üöö <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏</b> —Å–ª–µ–¥—É—é—â–∏–µ:',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'period':
        await bot.send_message(callback_query.from_user.id, text='üìÖ <b>–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</b> —Å–ª–µ–¥—É—é—â–∏–µ:',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'complaint':
        await bot.send_message(callback_query.from_user.id, text='üìî <b>–ñ–∞–ª–æ–±—É</b> –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç–∞–∫:',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'review':
        await bot.send_message(callback_query.from_user.id, text='üìö <b>–û—Ç–∑—ã–≤</b> –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç–∞–∫:',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'get':
        await bot.send_message(callback_query.from_user.id,
                               text='üìÉ –ß—Ç–æ–±—ã <b>–ø–æ–ª—É—á–∏—Ç—å</b> —á–µ–∫ –∑–∞–∫–∞–∑–∞, <b>–ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'cancel':
        await bot.send_message(callback_query.from_user.id, text='‚ùå –ß—Ç–æ–±—ã <b>–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑</b>, <b>–æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'place':
        await bot.send_message(callback_query.from_user.id,
                               text='üìù –ß—Ç–æ–±—ã <b>—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b>, <b>—Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'track0':
        await bot.send_message(callback_query.from_user.id, text='üëÅ –ß—Ç–æ–±—ã <b>–æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑</b>, <b>–æ—Ç—Å–ª–µ–¥–∏—Ç–µ –µ–≥–æ</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'method':
        await bot.send_message(callback_query.from_user.id, text='üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–µ <b>—Å–ø–æ—Å–æ–±—ã</b> –æ–ø–ª–∞—Ç—ã:',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'issue':
        await bot.send_message(callback_query.from_user.id, text='üìö –í–æ–∑–º–æ–∂–Ω—ã–µ <b>—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã</b>',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'policy':
        await bot.send_message(callback_query.from_user.id, text='üìú –ü–æ–ª–∏—Ç–∏–∫–∞ <b>–≤–æ–∑–≤—Ä–∞—Ç–æ–≤</b> —Ç–∞–∫–æ–≤–∞',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'got':
        await bot.send_message(callback_query.from_user.id, text='üí∏ –ß—Ç–æ–±—ã <b>–æ—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç</b> –Ω—É–∂–Ω–æ',
                               parse_mode='HTML')
    elif callback_query.data.split('btn_')[1] == 'track1':
        await bot.send_message(callback_query.from_user.id, text='üëÅ –ß—Ç–æ–±—ã <b>–æ—Ç—Å–ª–µ–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç</b> –Ω—É–∂–Ω–æ',
                               parse_mode='HTML')